import logging
import sqlite3
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, InputFile, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import get_main_menu, remove_menu, get_product_nav, get_payment_confirmation_keyboard
from typing import Dict

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PaymentStates(StatesGroup):
    WAITING_PAYMENT_PROOF = State()
    ADMIN_CONFIRMATION = State()


def load_config():
    config = {'BOT_TOKEN': '', 'ADMINS': [], 'PAYMENT_DETAILS': ''}
    try:
        with open('config.txt', 'r', encoding='utf-8') as file:
            for line in file:
                line = line.strip()
                if line.startswith('BOT_TOKEN='):
                    config['BOT_TOKEN'] = line.split('=')[1].strip()
                elif line.startswith('ADMINS='):
                    admins = line.split('=')[1].strip().split(',')
                    config['ADMINS'] = [int(admin_id.strip()) for admin_id in admins if admin_id.strip().isdigit()]
                elif line.startswith('PAYMENT_DETAILS='):
                    config['PAYMENT_DETAILS'] = line.split('=')[1].strip()
    except FileNotFoundError:
        logger.error("–§–∞–π–ª config.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        raise
    if not config['BOT_TOKEN']:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ config.txt")
    if not config['PAYMENT_DETAILS']:
        raise ValueError("–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ config.txt")
    return config


try:
    config = load_config()
    BOT_TOKEN = config['BOT_TOKEN']
    ADMINS = config['ADMINS']
    PAYMENT_DETAILS = config['PAYMENT_DETAILS']
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
pending_orders: Dict[int, Dict] = {}  # {user_id: {product_id: int, product_name: str, price: float}}


def get_products():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, description, price, photo FROM products")
    products = cursor.fetchall()
    conn.close()
    return products


async def show_product(message: types.Message, product_index: int = 0):
    products = get_products()
    if not products:
        await message.answer("–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=get_main_menu())
        return

    product_index = product_index % len(products)
    product = products[product_index]

    caption = (
        f"üìõ <b>{product[1]}</b>\n\n"
        f"üìù <i>{product[2]}</i>\n\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{product[3]} —Ä—É–±.</b>\n"
        f"üÜî ID: {product[0]}"
    )

    photo_path = product[4] if len(product) > 4 else None

    if photo_path and os.path.exists(photo_path):
        try:
            with open(photo_path, 'rb') as photo_file:
                await message.answer_photo(
                    types.BufferedInputFile(photo_file.read(), filename="product.jpg"),
                    caption=caption,
                    reply_markup=get_product_nav(product_index, len(products)),
                    parse_mode=ParseMode.HTML
                )
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")

    await message.answer(
        text=caption,
        reply_markup=get_product_nav(product_index, len(products)),
        parse_mode=ParseMode.HTML
    )


async def is_admin(user_id: int):
    return user_id in ADMINS

#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_name = message.from_user.full_name
    user_id = message.from_user.id
    username = message.from_user.username
    try:
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        cursor.execute("SELECT tg_id FROM users WHERE tg_id = ?", (user_id,))
        existing_user = cursor.fetchone()

        if not existing_user:
            cursor.execute(
                "INSERT INTO users (tg_id, username, full_name) VALUES (?, ?, ?)",
                (user_id, username, user_name)
            )
            conn.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_name} (ID: {user_id})")

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
    finally:
        conn.close()

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω.",
        reply_markup=get_main_menu()
    )


@dp.message(F.text == "üì¶ –¢–æ–≤–∞—Ä—ã")
async def handle_products(message: Message):
    await show_product(message)


@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_orders(message: Message):
    await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤", reply_markup=get_main_menu())


@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def handle_profile(message: Message):
    user = message.from_user
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–ò–º—è: {user.full_name}\n"
        f"Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"ID: {user.id}"
    )
    await message.answer(profile_text, reply_markup=get_main_menu())


@dp.callback_query(F.data.startswith("prev_") | F.data.startswith("next_"))
async def handle_product_nav(callback: types.CallbackQuery):
    action, index = callback.data.split("_")
    index = int(index)
    products = get_products()

    if not products:
        await callback.answer("–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    if action == "prev":
        new_index = (index - 1) % len(products)
    elif action == "next":
        new_index = (index + 1) % len(products)

    try:
        await callback.message.edit_media()
    except:
        print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')

    await show_product(callback.message, new_index)
    await callback.answer()


@dp.callback_query(F.data.startswith("buy_"))
async def handle_buy_product(callback: types.CallbackQuery):
    product_index = int(callback.data.split("_")[1])
    products = get_products()

    if not products:
        await callback.answer("–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    product = products[product_index % len(products)]
    user_id = callback.from_user.id

    pending_orders[user_id] = {
        'product_id': product[0],
        'product_name': product[1],
        'price': product[3],
        'username': callback.from_user.username,
        'full_name': callback.from_user.full_name
    }

    payment_message = (
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞:</b> {product[1]}\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{product[3]} —Ä—É–±.</b>\n\n"
        f"üìù <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
        f"{PAYMENT_DETAILS}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª' –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞."
    )

    await callback.message.answer(
        payment_message,
        reply_markup=get_payment_confirmation_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@dp.callback_query(F.data == "confirm_payment")
async def handle_payment_confirmation(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(PaymentStates.WAITING_PAYMENT_PROOF)
    await callback.answer()


@dp.message(PaymentStates.WAITING_PAYMENT_PROOF, F.photo)
async def handle_payment_proof(message: Message, state: FSMContext):
    user_id = message.from_user.id
    order_info = pending_orders.get(user_id)

    if not order_info:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    admin_message = (
        f"üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_info['full_name']} (@{order_info['username']})\n"
        f"üÜî ID: {user_id}\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {order_info['product_name']}\n"
        f"üí∞ –°—É–º–º–∞: {order_info['price']} —Ä—É–±.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã:"
    )

    admin_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{user_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{user_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMINS:
        try:
            await bot.send_photo(
                chat_id=admin_id,
                photo=message.photo[-1].file_id,
                caption=admin_message,
                reply_markup=admin_keyboard,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
        "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
        reply_markup=get_main_menu()
    )
    await state.clear()


@dp.callback_query(F.data.startswith("admin_confirm_") | F.data.startswith("admin_reject_"))
async def handle_admin_decision(callback: CallbackQuery):
    action, user_id = callback.data.split("_")[1], int(callback.data.split("_")[2])
    order_info = pending_orders.get(user_id)

    if not order_info:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if action == "confirm":
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞ —Ç–æ–≤–∞—Ä '{order_info['product_name']}' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! "
                     f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        await callback.answer("–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        await callback.message.edit_caption(
            caption=f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.full_name}",
            reply_markup=None
        )
    else:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞ —Ç–æ–≤–∞—Ä '{order_info['product_name']}' –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
        await callback.message.edit_caption(
            caption=f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.full_name}",
            reply_markup=None
        )

    if user_id in pending_orders:
        del pending_orders[user_id]


@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", reply_markup=get_main_menu())
        return
    await message.answer("üõ°Ô∏è –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –±–æ—Ç–∞!", reply_markup=get_main_menu())


@dp.message(Command("hide"))
async def cmd_hide(message: Message):
    await message.answer("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ", reply_markup=remove_menu())


@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


async def main():
    logger.info("Start")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())